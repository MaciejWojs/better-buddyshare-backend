generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
    // previewFeatures = ["postgresqlExtensions"]
    output          = "./generated/"
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [citext]
}

model User {
    userId Int @id @unique @default(autoincrement()) @map("user_id")

    email    String @unique @db.Citext
    username String @unique @db.Citext
    password String

    createdAt DateTime @default(now()) @map("created_at")

    avatar        String @default("")
    profileBanner String @default("") @map("profile_banner")
    description   String @default("Default description")

    isBanned     Boolean   @default(false) @map("is_banned")
    banReason    String?   @map("ban_reason")
    banExpiresAt DateTime? @map("ban_expires_at")

    streamToken String? @default("") @map("stream_token")

    roles              UserRole[]
    // użytkownik jako moderator
    moderatedStreamers Moderator[] @relation("ModeratorUser")

    // użytkownik jako streamer (moderowani przez innych)
    myModerators  Moderator[]   @relation("ModeratorStreamer")
    Stream        Stream[]
    Subscribers   Subscribers[] @relation("SubscriberUser")
    Subscriptions Subscribers[] @relation("SubscriberStreamer")

    bannedUsersAsStreamer BannedUsersPerStreamer[] @relation("BannedUserStreamer")
    bannedAsUser          BannedUsersPerStreamer[] @relation("BannedUser")
    bannedByMe            BannedUsersPerStreamer[] @relation("BannedByUser")
    RefreshToken          RefreshToken[]

    @@map("users")
}

model Role {
    roleId      Int              @id @default(autoincrement()) @map("role_id")
    name        String           @unique // e.g. "admin", "support", "streamer"
    permissions RolePermission[]
    users       UserRole[]

    @@map("roles")
}

model UserRole {
    userID Int @map("user_id")
    roleID Int @map("role_id")

    user User @relation(fields: [userID], references: [userId])
    role Role @relation(fields: [roleID], references: [roleId])

    @@id([userID, roleID])
}

model Permission {
    permissionId Int              @id @default(autoincrement()) @map("permission_id")
    name         String           @unique // e.g. "USER_MANAGE", "STREAMER_MANAGE"
    roles        RolePermission[]

    @@map("permissions")
}

model RolePermission {
    roleId       Int
    permissionId Int

    role       Role       @relation(fields: [roleId], references: [roleId])
    permission Permission @relation(fields: [permissionId], references: [permissionId])

    @@id([roleId, permissionId])
    @@map("role_permissions")
}

model Moderator {
    moderatorId Int @id @default(autoincrement()) @map("moderator_id")

    userId     Int @map("user_id") // moderator
    streamerId Int @map("streamer_id") // streamer

    user     User @relation("ModeratorUser", fields: [userId], references: [userId])
    streamer User @relation("ModeratorStreamer", fields: [streamerId], references: [userId])

    permissions ModeratorPermission[]

    @@unique([userId, streamerId]) // jeden moderator dla danego streamera
    @@map("moderators")
}

model ModeratorPermission {
    id          Int @id @default(autoincrement())
    moderatorId Int

    type ModeratorPermissionType

    moderator Moderator @relation(fields: [moderatorId], references: [moderatorId])

    @@map("moderator_permissions")
}

enum ModeratorPermissionType {
    CHAT_MANAGE
    STREAM_CONTROL
}

model Stream {
    streamId Int @id @default(autoincrement()) @map("stream_id")

    streamerId  Int    @map("streamer_id")
    title       String @default("Untitled Stream")
    description String @default("No description provided")
    thumbnail   String @default("")

    isLive    Boolean   @default(false) @map("is_live")
    isPublic  Boolean   @default(true) @map("is_public")
    startedAt DateTime  @default(now()) @map("started_at")
    endedAt   DateTime? @map("ended_at")
    path      String?

    streamer User @relation(fields: [streamerId], references: [userId])

    @@map("streams")
}

model Subscribers {
    subscriberId Int @id @default(autoincrement()) @map("id")
    userId       Int @map("user_id")
    streamerId   Int @map("streamer_id")

    user     User @relation("SubscriberUser", fields: [userId], references: [userId])
    streamer User @relation("SubscriberStreamer", fields: [streamerId], references: [userId])

    @@map("subscribers")
}

model BannedUsersPerStreamer {
    bannedUserId Int       @id @default(autoincrement()) @map("id")
    streamerId   Int       @map("streamer_id")
    userId       Int       @map("user_id")
    reason       String    @default("Unknown reason")
    bannedBy     Int       @map("banned_by")
    bannedSince  DateTime  @default(now()) @map("banned_since")
    bannedUntil  DateTime? @map("banned_until")
    isPermanent  Boolean   @default(true) @map("is_permanent")

    streamer     User @relation("BannedUserStreamer", fields: [streamerId], references: [userId])
    user         User @relation("BannedUser", fields: [userId], references: [userId])
    bannedByUser User @relation("BannedByUser", fields: [bannedBy], references: [userId])

    @@unique([streamerId, userId])
    @@map("banned_users_per_streamer")
}

model RefreshToken {
    id          String   @id @default(uuid())
    token       String   @unique
    userId      Int      @map("user_id")
    expiresAt   DateTime @map("expires_at")
    issuedAt    DateTime @default(now()) @map("issued_at")
    invalidated Boolean  @default(false)

    user User @relation(fields: [userId], references: [userId])

    @@map("refresh_tokens")
}
