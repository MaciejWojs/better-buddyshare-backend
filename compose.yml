services:
  waf:
    image:  owasp/modsecurity-crs:nginx-alpine
    # build:
    #   context: ./nginx-waf
    #   dockerfile: Dockerfile
    container_name: modsecurity-nginx-waf
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # - ./nginx-waf/modsecurity.conf:/etc/nginx/modsecurity.conf
      - ./nginx-waf/nginx.conf:/etc/nginx/templates/conf.d/default.conf.template
      - ./nginx-waf/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf:/etc/modsecurity.d/owasp-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf
    networks:
      - backend
  db:
    image: postgres:18.0-alpine3.22
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    networks:
      - backend
    # volumes:
      # - postgres_data:/var/lib/postgresql/data
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c pg_stat_statements.max=10000
      -c pg_stat_statements.track_utility=off

  app:
    image: bs-backend:latest
    # container_name: backend
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    networks:
      - backend
    depends_on:
      - db
      - cache
      - queue
    # command: [ "bun", "run", "container" ]
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      # VALKEY_PASSWORD: ${VALKEY_PASSWORD}
      # VALKEY_DATABASE: ${VALKEY_DATABASE}
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@queue:5672
      VALKEY_URL: valkey://default:${VALKEY_PASSWORD}@cache:6379/0
      VIDEO_QUEUE_NAME: ${VIDEO_QUEUE_NAME}
      PHOtO_QUEUE_NAME: ${PHOTO_QUEUE_NAME}
    #   SALT: ${SALT}
    #   PEPPER: ${PEPPER}
    #   FRONT_PORT: ${FRONT_PORT}
    #   FRONT_HOST: ${FRONT_HOST}
    #   PORT: ${PORT}
    #   JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET}
    #   JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
    #   COOKIE_SECRET: ${COOKIE_SECRET}
    #   NGINX_HOST: nginx
    #   DC_WEBHOOK_URL: ${DC_WEBHOOK_URL}
    #   DEVELOPMENT: ${DEVELOPMENT} # true or false
    # volumes:
    #   - ./media:/app/media
    # ports:
    #   - "5000:5000"

    # deploy:
    #   replicas: 3
    #   mode: replicated
      # env
  # app2:
  #   image: bs-backend:latest
  #   container_name: backend2
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   environment:
  #     NUMBER: "2"
  #   ports:
  #     - "5001:5001"
  #   networks:
  #     - backend
  
  # app3:
  #   image: bs-backend:latest
  #   container_name: backend3
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   restart: unless-stopped
  #   environment:
  #     NUMBER: "3"
  #   ports:
  #     - "5002:5002"
  #   networks:
  #     - backend
    
  nginx:
    image: bs-load-balancer
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: bs-load-balancer
    restart: unless-stopped
    depends_on:
      - app
    environment:
      HOST: app
      HOST2: app
      HOST3: app
    # ports:
      # - "1935:1935"
      # - "8080:8080"
      # - "80:80"
    networks:
      - backend

  srs:
    image: ossrs/srs:6
    ports:
      - "1935:1935"     # RTMP
      - "1985:1985"     # SRS HTTP API
      - "8080:8080"     # HLS/HTTP/Web
      - "8000:8000/udp" # WebRTC
    volumes:
      - ./srs/srs.conf:/usr/local/srs/conf/srs.conf
      # - ./srs/srs-dvr-cron:/etc/cron.d/srs-dvr-cron
    command: ["./objs/srs", "-c", "conf/srs.conf"]
    restart: always
    networks:
      - backend
  
  cache:
    image: valkey/valkey:9-alpine3.22
    container_name: valkey-redis
    restart: unless-stopped
    environment:
      VALKEY_PASSWORD: ${VALKEY_PASSWORD}
      VALKEY_USER: ${VALKEY_USER}
    command: valkey-server --requirepass ${VALKEY_PASSWORD}
    ports:
      - "6379:6379"
    networks:
      - backend

  queue:
      image: rabbitmq:4.1-management-alpine
      container_name: rabbitmq
      restart: unless-stopped
      ports:
        - "5672:5672"
        - "15672:15672"
      hostname: rabbitmq
      environment:
        RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
        RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
      networks:
        - backend
  
  media-worker:
    build:
      context: ./upload-media-worker
      dockerfile: Dockerfile
    container_name: upload-media-worker
    restart: unless-stopped
    depends_on:
      - queue
      - app
      - minio-setup
      - srs
    environment:
      MINIO_ENDPOINT: http://simple-storage:9000
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER}:${RABBITMQ_DEFAULT_PASS}@queue:5672
      VALKEY_URL: valkey://default:${VALKEY_PASSWORD}@cache:6379/0
      VIDEO_QUEUE_NAME: ${VIDEO_QUEUE_NAME}
      PHOTO_QUEUE_NAME: ${PHOTO_QUEUE_NAME}

    networks:
      - backend
  
  simple-storage:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
       - backend

  minio-setup:
    image: minio/mc:latest
    container_name: minio-setup
    depends_on:
      simple-storage:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set simplestorage http://simple-storage:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
      mc mb simplestorage/videos || true;
      mc mb simplestorage/photos || true;
      mc anonymous set download simplestorage/videos || true;
      mc anonymous set download simplestorage/photos || true;
      "
    networks:
       - backend



networks:
  backend:
    driver: bridge

# volumes:
#   postgres_data:
